import drake
import drake.cxx

config = None
lib_static = None
lib_dynamic = None

rule_build = None
rule_check = None
rule_install = None

def configure(cxx_toolkit = None,
              cxx_config = None,
              openssl = None,
              prefix = '/usr',
              enable_debug = True):

  global config, lib_static, lib_dynamic, rule_build, rule_check, rule_install

  # Toolkit
  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()

  # Libraries
  openssl = drake.cxx.find_library('openssl/opensslconf.h', prefix = openssl)

  # Global Configuration
  config = drake.cxx.Config()
  config.add_local_include_path('sources')
  config.lib_path('lib')
  config += openssl

  # Local Configuration
  cxx_config = cxx_config or drake.cxx.Config()
  cxx_config += config
  cxx_config.lib('crypto')
  cxx_config.lib('ssl')
  cxx_config.lib_path_runtime('.')

  # Tests
  tests = ['bn',
           'rand',
           'rsa']

  tests_cxx_config = drake.cxx.Config(cxx_config)
  tests_cxx_config += config
  tests_cxx_config += openssl
  tests_cxx_config.lib('crypto')
  tests_cxx_config.lib('ssl')

  # Sources
  sources = drake.nodes(
    'sources/dopenssl/all.h',
    'sources/dopenssl/bn.c',
    'sources/dopenssl/bn.h',
    'sources/dopenssl/rand.c',
    'sources/dopenssl/rand.h',
    'sources/dopenssl/rsa.c',
    'sources/dopenssl/rsa.h',
    )

  if enable_debug:
    cxx_config.define("DEBUG")
  else:
    cxx_config.define("NDEBUG")

  lib_static = drake.cxx.StaticLib('lib/dopenssl', sources, cxx_toolkit, cxx_config)
  lib_dynamic = drake.cxx.DynLib('lib/dopenssl', sources, cxx_toolkit, cxx_config)

  # Build
  rule_build = drake.Rule('build')
  rule_build << lib_static
  rule_build << lib_dynamic

  # Check
  tests_rule = drake.Rule('tests')
  rule_check = drake.Rule('check')
  for test in tests:
    config_test = drake.cxx.Config(tests_cxx_config)
    config_test.lib_path_runtime('%s../../lib' % ('../' * test.count('/')))
    path = drake.Path('tests/dopenssl/%s.c' % test)
    bin_path = drake.Path('tests/dopenssl/%s' % test)
    bin = drake.cxx.Executable(bin_path,
                               drake.nodes(path) +
                               [lib_dynamic],
                               cxx_toolkit, config_test)
    tests_rule << bin
    runner = drake.Runner(bin)
    rule_check << runner.status

  # Install
  rule_install = drake.Rule('install')
  prefix = drake.Path(prefix)
  rule_install << drake.install(lib_dynamic, prefix)
  rule_install << drake.install(lib_static, prefix)
  rule_install << drake.install(list(filter(lambda n: isinstance(n, drake.cxx.Header), sources)), prefix / 'include', 'sources')
